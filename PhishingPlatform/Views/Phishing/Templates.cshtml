@model PhishingPlatform.Models.TemplateEmail


@{
    ViewBag.Title = "Templates";
    var websiteData = ViewBag.WebsiteData as SelectList;

}

<script src="https://cdn.quilljs.com/1.3.6/quill.min.js"></script>
<link href="https://cdn.quilljs.com/1.3.6/quill.core.css" rel="stylesheet">
<script src="https://cdn.quilljs.com/1.3.6/quill.core.js"></script>
<link href="https://cdn.quilljs.com/1.3.6/quill.snow.css" rel="stylesheet">
<link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.11.2/css/all.min.css" rel="stylesheet">


<div class="container">
    <h1 class="mt-4">Phishing</h1>
    <ol class="breadcrumb mb-4">
        <li class="breadcrumb-item">Phishing</li>
        <li class="breadcrumb-item active"><a href="~/Views/Phishing/Templates.cshtml">Email Template</a></li>
    </ol>

    <div class="col col-lg-7">
        <h1>Create Your Phishing Template</h1>
    </div>
    <hr class="dropdown-divider my-xl-3" />

    <div class="contact__wrapper shadow-lg mt-n9">
        <div class="row no-gutters">
            <div class="col-lg-5 contact-info__wrapper gradient-brand-color p-5 order-lg-2">
                <h3 class="color--white mb-5">Email preview</h3>
                <div id="preview-container">

                    <div id="preview-subject"></div>
                    <hr />
                    <div id="preview-body"></div>
                </div>

                <figure class="figure position-absolute m-0 opacity-06 z-index-100" style="bottom:0; right: 10px">
                    <svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" width="444px" height="626px">
                        <defs>
                            <linearGradient id="PSgrad_1" x1="0%" x2="81.915%" y1="57.358%" y2="0%">
                                <stop offset="0%" stop-color="rgb(255,255,255)" stop-opacity="1"></stop>
                                <stop offset="100%" stop-color="rgb(0,54,207)" stop-opacity="0"></stop>
                            </linearGradient>
                        </defs>
                    </svg>
                </figure>
            </div>

            <div class="col-lg-7 contact-form__wrapper p-5 order-lg-1">
                @using (Html.BeginForm("SubmitTemplate", "Phishing", FormMethod.Post, new { @class = "contact-form form-validate", @novalidate = "novalidate", @id = "templateForm" }))
                {

                    <div class="row">
                        <div class="col-sm-6 mb-3">
                            <div class="form-floating mb-3">
                                @Html.DropDownListFor(model => model.WebsiteID, ViewBag.WebsiteData as SelectList, new { @class = "form-select", @id = "WebID" })
                                <label for="CategoryID">Template Category</label>
                            </div>
                        </div>

                        <div class="col-sm-6 mb-3">
                            <div class="form-group">
                                <div class="form-floating mb-3">
                                    @Html.TextBoxFor(model => model.Subject, new { @class = "form-control", placeholder = "Category Header", @id = "Subject" })
                                    <label for="Subject">Category Header</label>
                                </div>
                            </div>
                        </div>

                        <div class="col-sm-12 mb-3">
                            <div class="form-group">
                                <label class="required-field" for="message">Email Body</label>
                                <!-- Create the editor container -->
                                <div id="editor-container" style="border-bottom-left-radius: 8px; border-bottom-right-radius: 8px"></div>
                            </div>
                        </div>

                        <!-- Visible input for testing -->
                        @Html.HiddenFor(model => model.Content, new { @class = "from-control", @id = "quillContent" })
                        @Html.Hidden("StringCode", "", new { @id = "StringCode" })
                        @Html.HiddenFor(model => model.FullEmail, new { @class = "from-control", @id = "FullEmail" })

                        <div class="col-sm-12 mb-3">
                            <button type="button" id="previewButton" class="btn btn-secondary">Preview</button>
                            <button type="submit" class="btn btn-primary">Submit</button>
                        </div>
                    </div>
                }
            </div>
        </div>
    </div>
</div>




<style>
    #preview-container {
        border: 1px solid #ccc;
        padding: 0;
        margin-top: 20px;
    }
</style>
<!-- Include Quill script -->
<script src="https://cdn.quilljs.com/1.3.6/quill.js"></script>

<script>
    // Function to update the preview
    function updatePreview() {
        // Get form values
        const subject = document.getElementById('Subject').value;
        const body = quillInstance.root.innerHTML;

        // Get the StringCode from the hidden field
        const stringCode = document.getElementById('StringCode').value;

        // Log for debugging
        console.log("StringCode:", stringCode);

        // Combine string code, subject, and body to create the full email
        const fullEmail = stringCode.replace('#subject holder variable', subject)
            .replace('#body holder variable', body);

        // Update preview elements
        document.getElementById('preview-subject').textContent = `Subject: ${subject}`;
        document.getElementById('preview-body').innerHTML = fullEmail;

        // Set the FullEmail hidden field
        document.getElementById('FullEmail').value = fullEmail;

        // Update other preview elements as needed
    }

    // Event listener for the "Preview" button
    document.getElementById('previewButton').addEventListener('click', function () {
        // Call the updatePreview function
        updatePreview();
    });

    // Event listener for website selection change
    document.getElementById('WebID').addEventListener('change', function () {
        // Fetch the StringCode for the selected website and update the hidden field
        fetchStringCode(this.value);
    });

    function fetchStringCode(websiteId) {
        // Use AJAX to fetch the StringCode based on the selected website
        // Update the URL and parameters based on your actual implementation
        const url = `/Phishing/GetWebsiteStringCode?websiteId=${websiteId}`;

        fetch(url)
            .then(response => response.text())
            .then(data => {
                // Log for debugging
                console.log("Fetched StringCode:", data);

                // Update the StringCode hidden field
                document.getElementById('StringCode').value = data;

                // Call the updatePreview function
                updatePreview();
            })
            .catch(error => console.error('Error fetching StringCode:', error));
    }


    // Initialize Quill inside a function to avoid global conflicts
    function initializeQuill() {
        var toolbarOptions = [
            [{ 'header': [1, 2, 3, 4, 5, 6, false] }],
            [{ 'font': [] }],

            ['bold', 'italic', 'underline', 'strike'],        // toggled buttons
            [{ 'list': 'ordered' }, { 'list': 'bullet' }, { 'align': [] }, { 'indent': '-1' }, { 'indent': '+1' }, { 'direction': 'rtl' }],

            ['blockquote', 'code-block', { 'script': 'sub' }, { 'script': 'super' }],

            [{ 'color': [] }, { 'background': [] }],          // dropdown with defaults from theme


            ['clean']                                         // remove formatting button
        ];
        var quill = new Quill('#editor-container', {
            modules: {
                toolbar: toolbarOptions
            },
            theme: 'snow'
        });

        return quill;
    }

    // Call the initialization function
    var quillInstance = initializeQuill();

    // Function to handle form submission
    function handleFormSubmission(event) {
        // Prevent the default form submission
        event.preventDefault();

        // Get the Quill content as HTML
        var quillContent = quillInstance.root.innerHTML;

        // Display Quill content in the visible input for testing
        var quillContentInput = document.getElementById('quillContent');
        quillContentInput.value = quillContent;

        // Log the Quill content to the console (for demonstration purposes)
        console.log("Quill Content:", quillContent);

        document.getElementById('templateForm').submit();

    }

    // Attach the form submission handler to the form
    document.getElementById('templateForm').addEventListener('submit', handleFormSubmission);
</script>

<style>
    body > #standalone-container {
        margin: 50px auto;
        max-width: 720px;
    }

    #editor-container {
        height: 350px;
    }
</style>